import java_cup.runtime.*; // defines the Symbol class
import java.util.*;

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int line, int ch, int val) {
        super(line, ch);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int line, int ch, String val) {
        super(line, ch);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}
class temp{
    static HashMap<String, Integer> reserve_map = new HashMap<>(){{
      put("bool",sym.BOOL);
      put("int",sym.INT);
      put("void",sym.VOID);
      put("true",sym.TRUE);
      put("false",sym.FALSE);
      put("struct",sym.STRUCT);
      put("cin",sym.CIN);
      put("cout",sym.COUT);
      put("if",sym.IF);
      put("else",sym.ELSE);
      put("while",sym.WHILE);
      put("return",sym.RETURN);
      put("(",sym.LPAREN);
      put(")",sym.RPAREN);
      put("{",sym.LCURLY);
      put("}",sym.RCURLY);
      put(";",sym.SEMICOLON);
      put(",",sym.COMMA);
      put(".",sym.DOT);
      put("<<",sym.WRITE);
      put(">>",sym.READ);
      put("++",sym.PLUSPLUS);
      put("--",sym.MINUSMINUS);
      put("+",sym.PLUS);
      put("-",sym.MINUS);
      put("*",sym.TIMES);
      put("/",sym.DIVIDE);
      put("!",sym.NOT);
      put("&&",sym.AND);
      put("||",sym.OR);
      put("==",sym.EQUALS);
      put("!=",sym.NOTEQUALS);
      put("<",sym.LESS);
      put(">",sym.GREATER);
      put("<=",sym.LESSEQ);
      put(">=",sym.GREATEREQ);
      put("=",sym.ASSIGN);
    }};
}
%%
COMMENT=      ["///"|"##"]
ESCAPECHAR=   [nt'\"\?\\]
DIGIT=        [0-9]
SPACE=        [\040\t]
LETTER=       [a-zA-Z]
LORUNDERSCORE=       [a-zA-Z_]
RESERVE=      "bool"|"int"|"void"|"true"|"false"|"struct"|"cin"|"cout"|"if"|"else"|"while"|"return"
SYMBOLS=      "{"|"}"|"("|")"|";"|","|"."|"<<"|">>"|"++"|"--"|"+"|"-"|"*"|"/"|"!"|"&&"|"||"|"=="|"!="|"<"|">"|"<="|">="|"="
%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%
{COMMENT}.* {

}

{RESERVE}|{SYMBOLS} { 
            Symbol s = new Symbol(temp.reserve_map.get(yytext()),
                              new TokenVal(yyline+1, CharNum.num));
            CharNum.num++;
            return s;
          }


{LORUNDERSCORE}+({LORUNDERSCORE}|{DIGIT})* {
            Symbol s = new Symbol(sym.ID,
                             new IdTokenVal(yyline+1, CharNum.num, yytext()));
            CharNum.num += yytext().length();
            return s;
          }

\"((\\{ESCAPECHAR})|[^\n\"\\])+\" {//normal string literal
            Symbol s = new Symbol(sym.STRINGLITERAL,
                             new StrLitTokenVal(yyline+1, CharNum.num, yytext()));
            CharNum.num += yytext().length();
            return s;
          }

\"((\\{ESCAPECHAR})|[^\n\"\\])+ {//unterminated string literal
            ErrMsg.fatal(yyline+1, CharNum.num,
                         "unterminated string literal ignored: " + yytext());
            CharNum.num += yytext().length();
          }

\"((\\(.|\n))|[^\n\"\\])+\" {//temrinated bad string literal
            ErrMsg.fatal(yyline+1, CharNum.num,
                         "string literal with bad escaped character" +
                         " ignored: " + yytext());
            CharNum.num += yytext().length();
          }

\"((\\(.|\n))|[^\n\"\\])+ {//untemrinated bad string literal
            ErrMsg.fatal(yyline+1, CharNum.num,
                         "unterminated string literal with bad escaped" +
                         " character ignored: " + yytext());
            CharNum.num += yytext().length();
          }

{DIGIT}+  { 
            Symbol s;
            try{
              int val = Integer.parseInt(yytext());
              s = new Symbol(sym.INTLITERAL,
                              new IntLitTokenVal(yyline+1, CharNum.num, val));
              }catch(NumberFormatException e){
                ErrMsg.warn(yyline+1, CharNum.num,
                         "integer literal too large; using max value");
                s = new Symbol(sym.INTLITERAL,
                                new IntLitTokenVal(yyline+1, CharNum.num, Integer.MAX_VALUE));
              }
            CharNum.num += yytext().length();
            return s;
          }

\n        { CharNum.num = 1; }

{SPACE}+  { CharNum.num += yytext().length(); }
        
.         { ErrMsg.fatal(yyline+1, CharNum.num,
                         "illegal character ignored: " + yytext());
            CharNum.num++;
          }
